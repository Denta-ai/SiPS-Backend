// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  password       String   @db.VarChar(100)
  role           Role     @default(customer)
  phoneNumber    String   @map("phone_number")
  profilePicture String?  @map("profile_picture")
  googleId       String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isDeleted      Boolean  @default(false)

  Transaction Transaction[]

  @@map("user")
}

model Schedule {
  id        Int            @id @default(autoincrement())
  date      DateTime
  hour      String
  price     Decimal
  status    ScheduleStatus @default(available)
  isDeleted Boolean        @default(false)

  TransactionSchedule TransactionSchedule[]

  @@map("schedule")
}

model Transaction {
  id              Int               @id @default(autoincrement())
  userId          Int               @map("user_id")
  bandName        String            @map("band_name")
  duration        Int
  transactionCode String            @unique @map("transaction_code") @db.VarChar(10)
  paymentProof    String            @map("payment_proof")
  totalPrice      Decimal           @map("total_price")
  notes           String
  status          TransactionStatus
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  isDeleted       Boolean           @default(false)

  user                User                  @relation(fields: [userId], references: [id])
  TransactionSchedule TransactionSchedule[]

  @@map("transaction")
}

model TransactionSchedule {
  id            Int @id @default(autoincrement())
  transactionId Int @map("transaction_id")
  scheduleId    Int @map("schedule_id")

  transaction Transaction @relation(fields: [transactionId], references: [id])
  schedule    Schedule    @relation(fields: [scheduleId], references: [id])

  @@unique([transactionId, scheduleId])
  @@map("transaction_schedule")
}

enum ScheduleStatus {
  booked
  available
}

enum Role {
  admin
  customer
}

enum TransactionStatus {
  approved
  reject
  pending
}
